gemtools2
---------

Installation
============

**Dependencies:**
"""""""""""""""""
**Python packages:** pandas, numpy, pysam, pyvcf, rpy2

**R package:** ggplot2

**To install gemtools2:**
"""""""""""""""""""""""""
pip install git+https://github.com/sgreer77/gemtools2.git


Running gemtools2
=================

gemtools2 is a collection of tools that use the **output of Long Ranger** (10X Genomics) to perform additional analyses

Long Ranger output files are indicated in the instructions below with an **LR** prefix

**General usage: gemtools2 -T [tool] [-options]**

Tools for getting basic information about the phase blocks:
""""""""""""""""""""""""""""""""""""""""""""""""""""

**get_phased_basic**: Obtain phasing information for all SNVs in the vcf file

	gemtools2 -T get_phased_basic -v [LR.vcf.gz] -o [output.phased_basic]
	
	Ex: gemtools2 -T get_phased_basic -v phased_variants.vcf.gz -o output.phased_basic
	
	Input:
		-v gzipped vcf file output from LR
	Output:
		-o output file: each row is an SNV; columns are phasing information for each SNV

**get_phase_blocks**: Summarize phase blocks -- coordinates, size, number of phased heterozygous SNVs per phase block etc.

	gemtools2 -T get_phase_blocks -i [out.phased_basic] -o [out.phase_blocks]
	
	Ex: gemtools2 -T get_phase_blocks -i out.phased_basic -o out.phase_blocks
	
	Input:
		-i output from 'get_phased_basic' tool
	Output:
		-o output file: each row is a phase block, columns summarize information for each phase block (size etc.)

Generally useful tools:
""""""""""""""""""""""""""

**get_phased_bcs:** For a particular phase block, return the haplotype 1 and haplotype 2 barcodes

	gemtools2 -T get_phased_bcs -i [out.phased_basic] -p [phase_block_id] -o [out.phased_bcs]
	
	Ex: gemtools2 -T get_phased_bcs -i out.phased_basic -p 1356780 -o out.phased_bcs

	Input:
		-i output from 'get_phased_basic' tool
		
		-p id number for phase block of interest (phase block ids are originally assigned in the LR.vcf.gz file)
	Output:
		-o output file: a table with the haplotype 1 and haplotype 2 barcodes indicated

**select_bcs:** Get barcodes shared by ALL region_in's and present in NONE of the region_out's

	gemtools2 -T select_bcs -b [LR.bam] -f [region_in] -g [region_out] -o [out.bcs]

	Ex: gemtools2 -T select_bcs -b phased_possorted.bam -f chr1,1000,2000;chr1,3000,4000 -g chr1,2000,3000 -o out.bcs.txt
	
	Input:
		-i bam file generated by Long Ranger
		
		-f regions where barcodes must be located; if multiple regions are specified then only barcodes present in ALL regions will be reported
		
		-g regions where barcodes must not be located
		
	Output:
		-o output file: list of barcodes
	
**get_bcs_in_region:** Get all the barcodes that exist in a given region of the genome

	gemtools2 -T get_bcs_in_region -b [LR.bam] -f [region_in] -o [out.bcs]
	
	Ex: gemtools2 -T get_bcs_in_region -b phased_possorted.bam -f chr1,1000,2000 -o out.bcs.txt
	
	Ex: gemtools2 -T get_bcs_in_region -b phased_possorted.bam -f chr1,1000,2000;chr1,3000,4000 -o out.bcs.txt

	Input:
		-i bam file generated by Long Ranger
		
		-f region(s) where barcodes must be located
		
	Output:
		-o output file: list of barcodes

**count_bcs_list:** Determine presence and quantity of given barcodes across a given region

	gemtools2 -T count_bcs_list -b [LR.bam] -f [region_in] -x [in_window] -b [bc_list] -o [out.bc_count]
	
	Ex: gemtools2 -T count_bcs_list -b phased_possorted.bam -f chr1,1000,2000 -x 100 -b bc_list.txt -o out.bc_count.txt

	Input:
		-i bam file generated by Long Ranger
		
		-f region(s) to assess barcodes
		
		-x size of windows to check for barcodes
		
		-b file containing list of barcodes (one barcode per line)
		
	Output:
		-o output file: rows are genomic window coordinates, columns are each barcode in bc_list file, entries are number of each barcode in each window

**plot_hmw:** Generate a plot of the mapping locations of reads with each barcode

	gemtools2 -T plot_hmw -i [out.bc_count] -o [out.pdf]

	Input:
		-i output file generated by 'count_bcs_list' tool
		
	Output:
		-o output file: plot of barcode mapping locations in a given region

SV analysis tools:
"""""""""""""""""""""

**bedpe2window:**

	gemtools2 -T bedpe2window -i [LR_input.bedpe] -w [window_size] -o [out.bed]

**get_shared_bcs:**

	gemtools2 -T get_shared_bcs -i [out.bed] -b [LR_bam_file] -o [out.shared]

**assign_sv_haps:**

	gemtools2 -T assign_sv_haps -i [out.shared] -c [LR_control.vcf.gz] -t [LR_test.vcf.gz] -o [out.haps]

**count_bcs:**

	gemtools2 -T count_bcs -i [out.shared] -b [LR.bam] -x [in_window] -y [out_window] -s [sv_name] -q [all|shared] -o [out.bc_count] 

**plot_hmw:** (see above also)

	gemtools2 -T plot_hmw -i [out.bc_count] -o [out.pdf]
